stages:
  - test
  - style
  - deploy

cargo:
  stage: test
  image: "rust:latest"
  variables:
    CARGO_HOME: "$CI_PROJECT_DIR/cargo"
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends libpq-dev
  script:
    - du -hs target || true
    - du -hs cargo || true
    - echo "$CARGO_HOME" && rustc --version && cargo --version && rustup --version
    - cargo build --verbose
    - cargo test --verbose --jobs 1
  cache:
    paths:
      - target/
      - cargo/

npm:
  stage: test
  image: node:8
  script:
    - du -hs node_modules || true
    - node --version && npm --version
    - npm install
    - npm run build
  cache:
    paths:
      - node_modules/

rustfmt:
  stage: style
  image: rust:latest
  allow_failure: true
  script:
    - rustc --version && cargo --version && rustup --version
    - rustup component add rustfmt-preview
    - rustfmt --write-mode diff src/backend/**.rs

tslint:
  stage: style
  image: node:8
  allow_failure: true
  script:
    - node --version && npm --version
    - npm install tslint tslint-react typescript
    - ./node_modules/.bin/tslint -c tslint.json 'src/frontend/**/*.{ts,tsx}'

clippy:
  stage: style
  image: nrdmn/clippy:latest
  allow_failure: true
  script:
    - du -hs target || true
    - cargo clippy
  cache:
    paths:
      - target/

# Continual errors with pages:deploy
# pages:
#   stage: deploy
#   image: rust:latest
#   allow_failure: true
#   script:
#     - du -hs cargo || true
#     - rustc --version && cargo --version && rustup --version
#     - CARGO_HOME=$CI_PROJECT_DIR/cargo cargo doc
#     - rm -rf public
#     - mv target/doc public
#     - echo "<meta http-equiv=refresh content=1;url=fetch_web/index.html>" > public/index.html
#   cache:
#     paths:
#       - cargo/
#   artifacts:
#     paths:
#     - public
#   only:
#     - master

api:
  stage: deploy
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build . -f src/deploy/api/Dockerfile -t $CI_REGISTRY_IMAGE/api:latest
    - docker push $CI_REGISTRY_IMAGE/api:latest
    - |
      if [ "$CI_COMMIT_TAG" ] ; then
        docker build . -t $CI_REGISTRY_IMAGE/api:$CI_COMMIT_TAG
        docker push $CI_REGISTRY_IMAGE/api:$CI_COMMIT_TAG
      fi

web:
  stage: deploy
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build . -f src/deploy/web/Dockerfile -t $CI_REGISTRY_IMAGE/web:latest
    - docker push $CI_REGISTRY_IMAGE/web:latest
    - |
      if [ "$CI_COMMIT_TAG" ] ; then
        docker build . -t $CI_REGISTRY_IMAGE/web:$CI_COMMIT_TAG
        docker push $CI_REGISTRY_IMAGE/web:$CI_COMMIT_TAG
      fi

migrate:
  stage: deploy
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build . -f src/deploy/migrate/Dockerfile -t $CI_REGISTRY_IMAGE/migrate:latest
    - docker push $CI_REGISTRY_IMAGE/migrate:latest
    - |
      if [ "$CI_COMMIT_TAG" ] ; then
        docker build . -t $CI_REGISTRY_IMAGE/migrate:$CI_COMMIT_TAG
        docker push $CI_REGISTRY_IMAGE/migrate:$CI_COMMIT_TAG
      fi
