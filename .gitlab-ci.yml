stages:
  - test
  - style
  - deploy

cargo:
  stage: test
  image: "rust:latest"
  services:
    - postgres:10
  variables:
    POSTGRES_DB: fetch_test
    POSTGRES_USER: fetch
    POSTGRES_PASSWORD: "$CI_COMMIT_SHA"
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq --no-install-recommends build-essential libclang-dev libpq-dev
  script:
    - du -hs target || true
    - du -hs cargo || true
    - rustc --version && cargo --version && rustup --version
    - which $CI_PROJECT_DIR/cargo/bin/diesel || CARGO_HOME=$CI_PROJECT_DIR/cargo cargo install diesel_cli --no-default-features --features postgres
    - echo "DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}" > .env
    - cat .env
    - $CI_PROJECT_DIR/cargo/bin/diesel migration run
    - CARGO_HOME=$CI_PROJECT_DIR/cargo cargo build --verbose
    - CARGO_HOME=$CI_PROJECT_DIR/cargo cargo test --verbose --jobs 1
  cache:
    paths:
      - target/
      - cargo/

npm:
  stage: test
  image: node:8
  script:
    - du -hs node_modules || true
    - node --version && npm --version
    - npm install
    - npm run build
  cache:
    paths:
      - node_modules/

rustfmt:
  stage: style
  image: rust:latest
  allow_failure: true
  script:
    - rustc --version && cargo --version && rustup --version
    - rustup component add rustfmt-preview
    - rustfmt --write-mode diff src/backend/**.rs

tslint:
  stage: style
  image: node:8
  allow_failure: true
  script:
    - node --version && npm --version
    - npm install tslint tslint-react typescript
    - ./node_modules/.bin/tslint -c tslint.json 'src/frontend/**/*.{ts,tsx}'

clippy:
  stage: style
  image: rust:latest
  allow_failure: true
  script:
    - rustup --version
    - rustup install nightly
    - cargo +nightly install clippy
    - cargo +nightly clippy

pages:
  stage: deploy
  image: rust:latest
  allow_failure: true
  script:
    - du -hs cargo || true
    - rustc --version && cargo --version && rustup --version
    - CARGO_HOME=$CI_PROJECT_DIR/cargo cargo doc
    - rm -rf public
    - mv target/doc public
    - echo "<meta http-equiv=refresh content=1;url=fetch_web/index.html>" > public/index.html
  cache:
    paths:
      - cargo/
  artifacts:
    paths:
    - public
  only:
    - master

docker:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build . -t $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - |
      if [ "$CI_COMMIT_TAG" ] ; then
        docker build . -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
      fi
